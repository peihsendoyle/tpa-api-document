/**
 * TPA BackendLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { array, lazy, number, object, Schema, string } from '../schema';
import { DetailInfo, detailInfoSchema } from './detailInfo';
import { FeatureImage, featureImageSchema } from './featureImage';
import { Image, imageSchema } from './image';
import { Location, locationSchema } from './location';
import {
  ProgressionOfProject,
  progressionOfProjectSchema,
} from './progressionOfProject';
import { StateOfProject, stateOfProjectSchema } from './stateOfProject';
import { TypeOfFundraise, typeOfFundraiseSchema } from './typeOfFundraise';
import { TypeOfRealEstate, typeOfRealEstateSchema } from './typeOfRealEstate';

export interface AddProjectRequest {
  status: string;
  images: Image[];
  featureImage: FeatureImage;
  title: string;
  name: string;
  shortDescription: string;
  location: Location;
  typeOfRealEstate: TypeOfRealEstate;
  progressionOfProject: ProgressionOfProject[];
  stateOfProject: StateOfProject;
  typeOfFundraise: TypeOfFundraise;
  fundraiseExpiration: number;
  projectRatingByTpa: string;
  generalInfo: string;
  detailInfo: DetailInfo;
  fundraiseProposal: string;
  forecastProfit: number;
  forecastProfitRatio: number;
  price: number;
  totalSupply: number;
  unitPrice: number;
}

export const addProjectRequestSchema: Schema<AddProjectRequest> = object({
  status: ['status', string()],
  images: ['images', array(lazy(() => imageSchema))],
  featureImage: ['feature_image', lazy(() => featureImageSchema)],
  title: ['title', string()],
  name: ['name', string()],
  shortDescription: ['short_description', string()],
  location: ['location', lazy(() => locationSchema)],
  typeOfRealEstate: ['type_of_real_estate', lazy(() => typeOfRealEstateSchema)],
  progressionOfProject: [
    'progression_of_project',
    array(lazy(() => progressionOfProjectSchema)),
  ],
  stateOfProject: ['state_of_project', lazy(() => stateOfProjectSchema)],
  typeOfFundraise: ['type_of_fundraise', lazy(() => typeOfFundraiseSchema)],
  fundraiseExpiration: ['fundraise_expiration', number()],
  projectRatingByTpa: ['project_rating_by_tpa', string()],
  generalInfo: ['general_info', string()],
  detailInfo: ['detail_info', lazy(() => detailInfoSchema)],
  fundraiseProposal: ['fundraise_proposal', string()],
  forecastProfit: ['forecast_profit', number()],
  forecastProfitRatio: ['forecast_profit_ratio', number()],
  price: ['price', number()],
  totalSupply: ['total_supply', number()],
  unitPrice: ['unit_price', number()],
});
