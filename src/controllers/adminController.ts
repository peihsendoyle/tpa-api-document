/**
 * TPA BackendLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  LoginAdminRequest,
  loginAdminRequestSchema,
} from '../models/loginAdminRequest';
import {
  RegisterAdminRequest,
  registerAdminRequestSchema,
} from '../models/registerAdminRequest';
import { number } from '../schema';
import { BaseController } from './baseController';

export class AdminController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async loginAdmin(
    body: LoginAdminRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/admin/login');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, loginAdminRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async registerAdmin(
    body: RegisterAdminRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/admin/register');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, registerAdminRequestSchema],
    });
    req.json(mapped.body);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * @param page
   * @param limit
   * @return Response from the API call
   */
  async getUsers(
    page: number,
    limit: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      page: [page, number()],
      limit: [limit, number()],
    });
    req.query('page', mapped.page);
    req.query('limit', mapped.limit);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async deleteUser(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/users/609b9c22ff20902e10793a50');
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async verifyUser(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PUT',
      '/users/verify_account/609b9d23ff20902e10793a51'
    );
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getInfoAdmin(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/auth/admin');
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async changeRoleUser(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PUT',
      '/users/change_role/60a1e16d06fe061edacace94/fundraiser'
    );
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getUserInfoByAdmin(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/auth/admin/user-info/60b09ade0249700afe4121af'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }
}
