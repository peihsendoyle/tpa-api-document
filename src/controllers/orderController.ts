/**
 * TPA BackendLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateOrderRequest,
  createOrderRequestSchema,
} from '../models/createOrderRequest';
import {
  ReceiveFundsRequest,
  receiveFundsRequestSchema,
} from '../models/receiveFundsRequest';
import {
  SetRevenueRequest,
  setRevenueRequestSchema,
} from '../models/setRevenueRequest';
import {
  TransferRequest,
  transferRequestSchema,
} from '../models/transferRequest';
import { BaseController } from './baseController';

export class OrderController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async createOrder(
    body: CreateOrderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/order');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, createOrderRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async transfer(
    body: TransferRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/transfer');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, transferRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getBalanceOfAccount(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/get-balance/0x511682AF30D6dC6a79319dd5BBa8A8BC03EA2Fb8'
    );
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async setRevenue(
    body: SetRevenueRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/set-revenue');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ body: [body, setRevenueRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async receiveFunds(
    body: ReceiveFundsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/receive-funds');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, receiveFundsRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async distribute(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/distribute/60b098e50249700afe4121a7'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async listOrders(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/orders');
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }
}
