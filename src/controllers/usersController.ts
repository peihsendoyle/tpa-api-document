/**
 * TPA BackendLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ChangePasswordRequest,
  changePasswordRequestSchema,
} from '../models/changePasswordRequest';
import { LoginRequest, loginRequestSchema } from '../models/loginRequest';
import {
  RegisterRequest,
  registerRequestSchema,
} from '../models/registerRequest';
import {
  RequestPasswordConfirmRequest,
  requestPasswordConfirmRequestSchema,
} from '../models/requestPasswordConfirmRequest';
import {
  ResetPasswordRequest,
  resetPasswordRequestSchema,
} from '../models/resetPasswordRequest';
import {
  UpdateUserInfoRequest,
  updateUserInfoRequestSchema,
} from '../models/updateUserInfoRequest';
import { number, string } from '../schema';
import { BaseController } from './baseController';

export class UsersController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async login(
    body: LoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/login');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, loginRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async register(
    body: RegisterRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/register');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ body: [body, registerRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resetPassword(
    body: ResetPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/reset-password');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, resetPasswordRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async requestPasswordConfirm(
    body: RequestPasswordConfirmRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/reset-password-confirm');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, requestPasswordConfirmRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getInfoUser(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users/info');
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async changePassword(
    body: ChangePasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/users/change-password');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, changePasswordRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param firstName
   * @param lastName
   * @param email
   * @param phone
   * @param status
   * @param role
   * @param page
   * @param limit
   * @return Response from the API call
   */
  async findUserWithCondition(
    firstName: string,
    lastName: string,
    email: string,
    phone: string,
    status: string,
    role: number,
    page: number,
    limit: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users/find_users');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      firstName: [firstName, string()],
      lastName: [lastName, string()],
      email: [email, string()],
      phone: [phone, string()],
      status: [status, string()],
      role: [role, number()],
      page: [page, number()],
      limit: [limit, number()],
    });
    req.query('firstName', mapped.firstName);
    req.query('lastName', mapped.lastName);
    req.query('email', mapped.email);
    req.query('phone', mapped.phone);
    req.query('status', mapped.status);
    req.query('role', mapped.role);
    req.query('page', mapped.page);
    req.query('limit', mapped.limit);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateUserInfo(
    body: UpdateUserInfoRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/users/info');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, updateUserInfoRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
