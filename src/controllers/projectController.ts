/**
 * TPA BackendLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AddProjectRequest,
  addProjectRequestSchema,
} from '../models/addProjectRequest';
import {
  UpdateProjectRequest,
  updateProjectRequestSchema,
} from '../models/updateProjectRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class ProjectController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async addProject(
    body: AddProjectRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/group-invest/projects');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, addProjectRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getProjects(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/group-invest/projects');
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getProjectByID(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/group-invest/projects/609a3e5d248adb655943a36b'
    );
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async deleteProject(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'DELETE',
      '/group-invest/projects/609a3e5d248adb655943a36b'
    );
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateProject(
    body: UpdateProjectRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PUT',
      '/group-invest/projects/60b1e0fef3789bfa21a7b114'
    );
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, updateProjectRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param province
   * @return Response from the API call
   */
  async filterProjectByCondition(
    province: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/group-invest/filter-projects');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ province: [province, string()] });
    req.query('province', mapped.province);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async verifyProject(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PUT',
      '/group-invest/verify-projects/609e44357c17d451e48a003b'
    );
    req.baseUrl('Server 2');
    return req.call(requestOptions);
  }
}
